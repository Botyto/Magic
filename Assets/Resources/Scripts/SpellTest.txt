Class.Spell = {
	SpellType = "None",
}

for k,v in pairs(__SpellBase) do Spell[k] = v end
for k,v in pairs(__Spell) do     Spell[k] = v end

function Spell:__index(key)
	error(string.format("Reading from undefined member `%s.%s`", self.class, key))
end

function Spell:__newindex(key, value)
	error(string.format("Writing to undefined member `%s.%s`", self.class, key))
end

Class.InstantSpell = {
	__inherit = "Spell",

	SpellType = "Instant",

	Cast = function(self) print("std cast fn") end,
	OnTargetLost = function(self) end,
    OnFocusLost = function(self, handle) end,
}


Class.SpellTest = {
	__inherit = "InstantSpell",
}

function SpellTest:Cast()
	print("SpellTest Cast() " .. tostring(self))
	local handle = self:ManifestEnergyAndFocus(100, Vector3.new(0,0,5), Energy.Element.Fire, Energy.Shape.Cube)
	print("energy handle is " .. handle)
end
